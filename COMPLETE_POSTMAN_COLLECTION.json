{
  "info": {
    "name": "Inventory Management System - Complete API Testing",
    "description": "Comprehensive Postman collection for testing all endpoints of the Inventory Management System. Includes authentication, all CRUD operations, business logic tests, and error scenarios.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4444/api/v1",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "inventoryId",
      "value": "",
      "type": "string"
    },
    {
      "key": "storageId",
      "value": "",
      "type": "string"
    },
    {
      "key": "transportId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication & Authorization",
      "item": [
        {
          "name": "Register New User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"1234567890\",\n  \"password\": \"pass123\",\n  \"role\": \"staff\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data.user).to.have.property('_id');",
                  "    pm.collectionVariables.set('userId', responseJson.data.user._id);",
                  "});",
                  "",
                  "pm.test('Authorization header is set', function () {",
                  "    pm.expect(pm.response.headers.get('Authorization')).to.contain('Bearer');",
                  "    const authHeader = pm.response.headers.get('Authorization');",
                  "    const token = authHeader.replace('Bearer ', '');",
                  "    pm.collectionVariables.set('authToken', token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Register Admin User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"phone\": \"9876543210\",\n  \"password\": \"admin123\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const authHeader = pm.response.headers.get('Authorization');",
                  "    if (authHeader) {",
                  "        const token = authHeader.replace('Bearer ', '');",
                  "        pm.collectionVariables.set('adminToken', token);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"pass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["users", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Token is set', function () {",
                  "    const authHeader = pm.response.headers.get('Authorization');",
                  "    if (authHeader) {",
                  "        const token = authHeader.replace('Bearer ', '');",
                  "        pm.collectionVariables.set('authToken', token);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login with Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["users", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login fails with wrong password', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Current User Info",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": ["{{baseUrl}}"],
              "path": ["users", "me"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get user info successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/logout",
              "host": ["{{baseUrl}}"],
              "path": ["users", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Logout successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/users/",
              "host": ["{{baseUrl}}"],
              "path": ["users", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all users successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('users');",
                  "    pm.expect(responseJson.data).to.have.property('length');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Smith Updated\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/",
              "host": ["{{baseUrl}}"],
              "path": ["users", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"pass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/update_password",
              "host": ["{{baseUrl}}"],
              "path": ["users", "update_password"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Password update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin Update User (Admin Only)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"supplier\",\n  \"shift\": \"morning\",\n  \"wagePerHour\": 25,\n  \"hoursThisMonth\": 160\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin user update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Product Management",
      "item": [
        {
          "name": "Create Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Apple iPhone 15\",\n  \"batchId\": \"BATCH001\",\n  \"productCategory\": \"Electronics\",\n  \"price\": 999.99,\n  \"weight\": 0.2,\n  \"dimensions\": {\n    \"length\": 15,\n    \"width\": 7,\n    \"height\": 0.8\n  },\n  \"description\": \"Latest iPhone model\",\n  \"thresholdLimit\": 10,\n  \"mfgDate\": \"2024-01-15\",\n  \"expiryDate\": \"2026-01-15\",\n  \"supplierLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.5946, 12.9716]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/",
              "host": ["{{baseUrl}}"],
              "path": ["products", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('product');",
                  "    pm.collectionVariables.set('productId', responseJson.data.product._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Stock to Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product stock updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.product.quantity).to.be.above(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/",
              "host": ["{{baseUrl}}"],
              "path": ["products", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all products successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('products');",
                  "    pm.expect(responseJson.data).to.have.property('length');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Single Product",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get single product successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('product');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 899.99,\n  \"thresholdLimit\": 15,\n  \"description\": \"Updated iPhone description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Products by Category",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/category/Electronics",
              "host": ["{{baseUrl}}"],
              "path": ["products", "category", "Electronics"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get products by category successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('products');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Products Needing Restock",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/products/needsRestock",
              "host": ["{{baseUrl}}"],
              "path": ["products", "needsRestock"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get restock products successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Inventory Management",
      "item": [
        {
          "name": "Create Inventory (Admin Only)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Main Warehouse\",\n  \"totalCapacity\": 5000,\n  \"totalVolume\": 10000,\n  \"inventoryLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.5946, 12.9716]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/create",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "create"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Inventory creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('inventory');",
                  "    pm.collectionVariables.set('inventoryId', responseJson.data.inventory._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Inventories",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/inventory/",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all inventories successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('inventories');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Single Inventory",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get single inventory successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('inventory');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Product to Inventory (Direct)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Add product to inventory successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Products in Inventory",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get inventory products successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('products');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Inventory Utilization",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/utilization",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "utilization"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get inventory utilization successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('utilization');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Inventory Cost Summary",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/cost-summary",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "cost-summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get inventory cost summary successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('totalInventoryValue');",
                  "    pm.expect(responseJson.data).to.have.property('summary');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Storage Management",
      "item": [
        {
          "name": "Create Storage Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"locationId\": \"A1-001\",\n  \"dimensions\": {\n    \"length\": 100,\n    \"width\": 50,\n    \"height\": 30\n  },\n  \"holdingCapacity\": 500,\n  \"inventory\": \"{{inventoryId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/",
              "host": ["{{baseUrl}}"],
              "path": ["storages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Storage creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('storage');",
                  "    pm.collectionVariables.set('storageId', responseJson.data.storage._id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Storage Locations",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/storages/",
              "host": ["{{baseUrl}}"],
              "path": ["storages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all storages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('storages');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Storage by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get storage by ID successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('storage');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add Product to Storage",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Add product to storage successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Storage Utilization",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/utilization",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "utilization"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get storage utilization successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('utilization');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Storage Cost Summary",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/cost-summary",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "cost-summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get storage cost summary successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('totalStorageValue');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Transportation & Orders",
      "item": [
        {
          "name": "Create Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"packageId\": \"PKG001\",\n  \"transportationCost\": 150.50,\n  \"status\": \"pending\",\n  \"products\": [\n    {\n      \"product\": \"{{productId}}\",\n      \"quantity\": 2\n    }\n  ],\n  \"startLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.5946, 12.9716]\n  },\n  \"destination\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.6500, 12.9500]\n  },\n  \"eta\": \"2024-12-25T10:00:00.000Z\",\n  \"transportMode\": \"land\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buy/order",
              "host": ["{{baseUrl}}"],
              "path": ["buy", "order"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order creation successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('transportation');",
                  "    pm.collectionVariables.set('transportId', responseJson.data.transportation._id);",
                  "});",
                  "",
                  "pm.test('Order contains quantity-based calculations', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const transportation = responseJson.data.transportation;",
                  "    pm.expect(transportation).to.have.property('totalWeight');",
                  "    pm.expect(transportation).to.have.property('totalVolume');",
                  "    pm.expect(transportation).to.have.property('totalValue');",
                  "    pm.expect(transportation.products).to.be.an('array');",
                  "    ",
                  "    // Check if products have quantity field",
                  "    transportation.products.forEach(function(product) {",
                  "        pm.expect(product).to.have.property('quantity');",
                  "        pm.expect(product.quantity).to.be.above(0);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Order",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in_transit\",\n  \"currentLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.6000, 12.9600]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buy/order",
              "host": ["{{baseUrl}}"],
              "path": ["buy", "order"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Order update successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Transportation",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/transports/",
              "host": ["{{baseUrl}}"],
              "path": ["transports", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all transportation successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('deliveries');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transportation by Status",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/transports/status/pending",
              "host": ["{{baseUrl}}"],
              "path": ["transports", "status", "pending"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get transportation by status successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Overdue Deliveries",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/transports/overdue",
              "host": ["{{baseUrl}}"],
              "path": ["transports", "overdue"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get overdue deliveries successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Order with Insufficient Stock",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"packageId\": \"PKG002\",\n  \"transportationCost\": 200.00,\n  \"status\": \"pending\",\n  \"products\": [\n    {\n      \"product\": \"{{productId}}\",\n      \"quantity\": 1000\n    }\n  ],\n  \"startLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.5946, 12.9716]\n  },\n  \"destination\": {\n    \"type\": \"Point\",\n    \"coordinates\": [77.6500, 12.9500]\n  },\n  \"transportMode\": \"land\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buy/order",
              "host": ["{{baseUrl}}"],
              "path": ["buy", "order"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Insufficient stock error handled properly', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('stock');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Wage Management",
      "item": [
        {
          "name": "Get All Wage Entries",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/wages/",
              "host": ["{{baseUrl}}"],
              "path": ["wages", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get all wages successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('wages');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Calculate Wage",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/wages/calculate?wagePerHour=25&hoursThisMonth=160",
              "host": ["{{baseUrl}}"],
              "path": ["wages", "calculate"],
              "query": [
                {
                  "key": "wagePerHour",
                  "value": "25"
                },
                {
                  "key": "hoursThisMonth",
                  "value": "160"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Wage calculation successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('wage');",
                  "    pm.expect(responseJson.data.wage).to.eql(4000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Alert System",
      "item": [
        {
          "name": "Get Active Alerts (Not Implemented)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/alerts/",
              "host": ["{{baseUrl}}"],
              "path": ["alerts", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert endpoint not implemented', function () {",
                  "    pm.response.to.have.status(501);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Trigger Alert (Not Implemented)",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/alerts/trigger",
              "host": ["{{baseUrl}}"],
              "path": ["alerts", "trigger"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trigger alert not implemented', function () {",
                  "    pm.response.to.have.status(501);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Integration & Business Logic Tests",
      "item": [
        {
          "name": "Complete Product-Inventory-Storage Flow",
          "item": [
            {
              "name": "Step 1: Create Test Product",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productName\": \"Test Integration Product\",\n  \"batchId\": \"INTG001\",\n  \"productCategory\": \"Test\",\n  \"price\": 100.00,\n  \"weight\": 1.0,\n  \"dimensions\": {\n    \"length\": 10,\n    \"width\": 10,\n    \"height\": 10\n  },\n  \"thresholdLimit\": 5\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/products/",
                  "host": ["{{baseUrl}}"],
                  "path": ["products", ""]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Integration product created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const responseJson = pm.response.json();",
                      "    pm.collectionVariables.set('integrationProductId', responseJson.data.product._id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Step 2: Add Product to Inventory via Storage",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{integrationProductId}}\",\n  \"storageId\": \"{{storageId}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
                  "host": ["{{baseUrl}}"],
                  "path": ["inventory", "{{inventoryId}}", "products"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Product added to inventory via storage', function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Step 3: Verify Product in Both Inventory and Storage",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
                  "host": ["{{baseUrl}}"],
                  "path": ["inventory", "{{inventoryId}}", "products"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Product exists in inventory', function () {",
                      "    pm.response.to.have.status(200);",
                      "    const responseJson = pm.response.json();",
                      "    const products = responseJson.data.products;",
                      "    const integrationProductId = pm.collectionVariables.get('integrationProductId');",
                      "    const productExists = products.some(p => p._id === integrationProductId);",
                      "    pm.expect(productExists).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Capacity Limit Tests",
          "item": [
            {
              "name": "Test Heavy Product Rejection",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productName\": \"Heavy Product\",\n  \"batchId\": \"HEAVY001\",\n  \"price\": 50.00,\n  \"weight\": 10000\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/products/",
                  "host": ["{{baseUrl}}"],
                  "path": ["products", ""]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Heavy product created', function () {",
                      "    pm.response.to.have.status(201);",
                      "    const responseJson = pm.response.json();",
                      "    pm.collectionVariables.set('heavyProductId', responseJson.data.product._id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Try Adding Heavy Product (Should Fail)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{authToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": \"{{heavyProductId}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/storages/{{storageId}}/products",
                  "host": ["{{baseUrl}}"],
                  "path": ["storages", "{{storageId}}", "products"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Heavy product rejected due to capacity', function () {",
                      "    pm.response.to.have.status(400);",
                      "    const responseJson = pm.response.json();",
                      "    pm.expect(responseJson.message).to.contain('capacity');",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling & Edge Cases",
      "item": [
        {
          "name": "Invalid ObjectId Format",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/products/invalid-id-format",
              "host": ["{{baseUrl}}"],
              "path": ["products", "invalid-id-format"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid ObjectId handled properly', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Missing Authentication",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Missing auth returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid JSON Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Test\",\n  \"price\": \"not-a-number\",\n  \"invalidField\": \"should-be-rejected\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/",
              "host": ["{{baseUrl}}"],
              "path": ["products", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid data rejected', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Non-Admin Accessing Admin Endpoint",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Non-admin gets 403 Forbidden', function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    if (pm.response.code !== 404) {",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    }",
          "});"
        ]
      }
    }
  ]
}
