{
  "info": {
    "name": "Inventory Management System - Quantity-Based API Testing",
    "description": "Updated Postman collection for testing all quantity-based operations in the Inventory Management System. Includes authentication, CRUD operations with quantities, business logic validation, and error scenarios.",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4444/api/v1",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string"
    },
    {
      "key": "productId2",
      "value": "",
      "type": "string"
    },
    {
      "key": "inventoryId",
      "value": "",
      "type": "string"
    },
    {
      "key": "storageId",
      "value": "",
      "type": "string"
    },
    {
      "key": "transportationId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "System Health Check",
      "item": [
        {
          "name": "Ping Server",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../../ping",
              "host": ["{{baseUrl}}"],
              "path": ["../../ping"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Authentication & Authorization",
      "item": [
        {
          "name": "Register Regular User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.user).to.have.property('_id');",
                  "    pm.collectionVariables.set('userId', jsonData.data.user._id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser@inventory.com\",\n  \"password\": \"test123\",\n  \"role\": \"staff\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          }
        },
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin user created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.user.role).to.eql('admin');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@inventory.com\",\n  \"password\": \"admin123\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          }
        },
        {
          "name": "Login Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    ",
                  "    // Extract token from cookie header",
                  "    var cookieHeader = pm.response.headers.get('Set-Cookie');",
                  "    if (cookieHeader) {",
                  "        var tokenMatch = cookieHeader.match(/token=([^;]+)/);",
                  "        if (tokenMatch) {",
                  "            pm.collectionVariables.set('authToken', tokenMatch[1]);",
                  "            pm.collectionVariables.set('adminToken', tokenMatch[1]);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@inventory.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/login",
              "host": ["{{baseUrl}}"],
              "path": ["users", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "2. Product Management with Quantities",
      "item": [
        {
          "name": "Create Product A",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.collectionVariables.set('productId', jsonData.data.product._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Gaming Laptop\",\n  \"batchId\": \"LAPTOP001\",\n  \"description\": \"High-performance gaming laptop with RGB keyboard\",\n  \"price\": 1500,\n  \"weight\": 3.5,\n  \"dimensions\": {\n    \"length\": 35,\n    \"width\": 25,\n    \"height\": 3\n  },\n  \"productCategory\": \"Electronics\",\n  \"thresholdLimit\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Create Product B",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.collectionVariables.set('productId2', jsonData.data.product._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productName\": \"Wireless Mouse\",\n  \"batchId\": \"MOUSE001\",\n  \"description\": \"Ergonomic wireless mouse with USB receiver\",\n  \"price\": 25,\n  \"weight\": 0.1,\n  \"dimensions\": {\n    \"length\": 12,\n    \"width\": 7,\n    \"height\": 4\n  },\n  \"productCategory\": \"Electronics\",\n  \"thresholdLimit\": 20\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        },
        {
          "name": "Add Stock to Product A",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product quantity updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.product.quantity).to.be.above(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Add Stock to Product B",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId2}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId2}}"]
            }
          }
        },
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          }
        }
      ]
    },
    {
      "name": "3. Inventory Management with Quantities",
      "item": [
        {
          "name": "Create Inventory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Inventory created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.collectionVariables.set('inventoryId', jsonData.data.inventory._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{adminToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Main Electronics Warehouse\",\n  \"totalCapacity\": 2000,\n  \"totalVolume\": 50000,\n  \"inventoryLocation\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-122.4194, 37.7749]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/create",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "create"]
            }
          }
        },
        {
          "name": "Add Product A to Inventory (Quantity: 10)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product added to inventory with quantity\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 10\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Add More Product A to Inventory (Quantity: 5)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Quantity aggregated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Should now have 15 total (10 + 5)",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Add Product B to Inventory (Quantity: 20)",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId2}}\",\n  \"quantity\": 20\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Get Inventory Details (Check Quantities)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Inventory shows correct quantities\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.inventory.products).to.be.an('array');",
                  "    ",
                  "    // Check if products have quantity field",
                  "    jsonData.data.inventory.products.forEach(function(product) {",
                  "        pm.expect(product).to.have.property('quantity');",
                  "        pm.expect(product.quantity).to.be.above(0);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}"]
            }
          }
        },
        {
          "name": "Remove Product A Partially (Quantity: 3)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Partial removal successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Should now have 12 remaining (15 - 3)",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Test Over-Capacity Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Over-capacity error handled correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('capacity');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 1000\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "4. Storage Management with Quantities",
      "item": [
        {
          "name": "Create Storage Location",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Storage created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.collectionVariables.set('storageId', jsonData.data.storage._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"locationId\": \"WAREHOUSE-A1\",\n  \"dimensions\": {\n    \"length\": 100,\n    \"width\": 80,\n    \"height\": 50\n  },\n  \"holdingCapacity\": 1000,\n  \"inventory\": \"{{inventoryId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages",
              "host": ["{{baseUrl}}"],
              "path": ["storages"]
            }
          }
        },
        {
          "name": "Add Product A to Storage (Quantity: 5)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Product added to storage with quantity\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "products"]
            }
          }
        },
        {
          "name": "Add More Product A to Storage (Quantity: 3)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Storage quantity aggregated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Should now have 8 total (5 + 3)",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 3\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "products"]
            }
          }
        },
        {
          "name": "Get Storage Details (Check Quantities)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Storage shows correct product quantities\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.storage.products).to.be.an('array');",
                  "    ",
                  "    // Check if products have quantity field",
                  "    jsonData.data.storage.products.forEach(function(product) {",
                  "        pm.expect(product).to.have.property('quantity');",
                  "        pm.expect(product.quantity).to.be.above(0);",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}"]
            }
          }
        },
        {
          "name": "Remove Product Partially (Quantity: 2)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Partial removal from storage successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Should now have 6 remaining (8 - 2)",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "products"]
            }
          }
        },
        {
          "name": "Remove All Remaining Product (Complete Removal)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Complete removal successful\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Products array should be empty after complete removal",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 6\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "5. Order Management with Quantities",
      "item": [
        {
          "name": "Create Order with Multiple Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Order created with quantity calculations\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.transportation).to.have.property('totalWeight');",
                  "    pm.expect(jsonData.data.transportation).to.have.property('totalVolume');",
                  "    pm.expect(jsonData.data.transportation).to.have.property('totalValue');",
                  "    pm.expect(jsonData.data.transportation.products).to.be.an('array');",
                  "    ",
                  "    // Check if products have quantities",
                  "    jsonData.data.transportation.products.forEach(function(product) {",
                  "        pm.expect(product).to.have.property('quantity');",
                  "        pm.expect(product.quantity).to.be.above(0);",
                  "    });",
                  "    ",
                  "    pm.collectionVariables.set('transportationId', jsonData.data.transportation._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"packageId\": \"ORDER-001\",\n  \"transportMode\": \"land\",\n  \"products\": [\n    {\n      \"product\": \"{{productId}}\",\n      \"quantity\": 2\n    },\n    {\n      \"product\": \"{{productId2}}\",\n      \"quantity\": 5\n    }\n  ],\n  \"destination\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-122.4194, 37.7749]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buy/order",
              "host": ["{{baseUrl}}"],
              "path": ["buy", "order"]
            }
          }
        },
        {
          "name": "Test Insufficient Stock Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Insufficient stock error handled correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('stock');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"packageId\": \"ORDER-002\",\n  \"transportMode\": \"land\",\n  \"products\": [\n    {\n      \"product\": \"{{productId}}\",\n      \"quantity\": 1000\n    }\n  ],\n  \"destination\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-122.4194, 37.7749]\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/buy/order",
              "host": ["{{baseUrl}}"],
              "path": ["buy", "order"]
            }
          }
        },
        {
          "name": "Get All Transportation Orders",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transports",
              "host": ["{{baseUrl}}"],
              "path": ["transports"]
            }
          }
        }
      ]
    },
    {
      "name": "6. Error Handling & Edge Cases",
      "item": [
        {
          "name": "Test Invalid Quantity (Negative)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Negative quantity rejected\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": -5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Test Zero Quantity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Zero quantity rejected\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"{{productId}}\",\n  \"quantity\": 0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        },
        {
          "name": "Test Non-existent Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-existent product handled correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": \"507f1f77bcf86cd799439011\",\n  \"quantity\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "7. Business Logic Validation",
      "item": [
        {
          "name": "Check Inventory Utilization",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Utilization data calculated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('capacityUtilization');",
                  "    pm.expect(jsonData.data).to.have.property('volumeUtilization');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/inventory/{{inventoryId}}/utilization",
              "host": ["{{baseUrl}}"],
              "path": ["inventory", "{{inventoryId}}", "utilization"]
            }
          }
        },
        {
          "name": "Check Storage Cost Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Cost summary calculated correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('totalStorageValue');",
                  "    pm.expect(jsonData.data).to.have.property('capacityUtilization');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/storages/{{storageId}}/cost-summary",
              "host": ["{{baseUrl}}"],
              "path": ["storages", "{{storageId}}", "cost-summary"]
            }
          }
        },
        {
          "name": "Check Products Needing Restock",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{authToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/needsRestock",
              "host": ["{{baseUrl}}"],
              "path": ["products", "needsRestock"]
            }
          }
        }
      ]
    }
  ]
}
